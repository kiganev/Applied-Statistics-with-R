# if you answer randomly at an exam in which there are
# 20 multiple-choice questions (the number of options is 4)?
pbinom(11, 20, 0.25, lower.tail = TRUE, log.p = FALSE)
# Find the number of correct answers so that
# your test score is in the 75th percentile
qbinom(0.75, 20, 0.25, lower.tail = TRUE, log.p = FALSE)
# Generate 100 random numbers from the binomial distribution
# where $p = 0.6$ and $n = 20$
rbinom(100, 20, 0.6)
# Plot
plot(rbinom(100, 20, 0.6), type = "p")
# Histogram
hist(rbinom(100, 20, 0.6), breaks = 20)
# Geometric Random Variables
# What is the probability of tossing 5 times a fair coin and
# getting tails before we get heads on the sixth toss?
dgeom(5, 0.5, log=FALSE)
# What is the probability of tossing a coin between zero and
# five times before getting heads?
pgeom(5, 0.5, lower.tail = TRUE, log.p = FALSE)
# Poisson RV
# 15 cars arrive at a gas station on average per hour.
# What is the probability that 10 cars arrive during a chosen hour?
dpois(10, 15, log = FALSE)
# Calculate the probability of having 10 or less cars arrive:
ppois(10, 15, lower.tail = TRUE, log.p = FALSE)
# Uniform RV
# Calculate density at a given value
dunif(0.7, min = 0, max = 1, log = FALSE)
# Plot
plot(dunif, 0, 1, main = "The Uniform pdf")
# cdf
punif(0.7, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)
# Plot cdf
plot(punif, 0, 1, main = "Uniform cdf")
# Calculate median:
qunif(0.5, min = 0, max = 1, log = FALSE)
# Generate 10000 values of a uniformly distributed random variable:
runif(10000, min = 0, max = 1)
# Plot
plot(runif(10000, min = 0, max = 1),
type = "l", col = "red", main = "Uniform RV")
# Histogram:
hist(runif(10000, min = 0, max = 1),
breaks = 50, col = "red", main = "Uniform RV (histogram)")
# Exponential RV
dexp(2, 0.25)
# Plot
x <- seq(0, 20, by = 0.01)
y <- dexp(x, 0.25)
plot(x, y, type = "l")
# Plot the cdf
y <- pexp(x, 0.25)
plot(x, y, type = "l")
# Let $x$ be the amount of time that a customer is processed
# by a cashier at a department store. What is the probability
# that a customer is processed between 3 and 4 minutes
# if on average a customer is processed 4 minutes?
pexp(4, 0.25) - pexp(3,0.25)
# Find the time for which half of the customers are being processed
qexp(0.5, 0.25)
# Gamma function
x <- seq(1, 10, by=.1)
y <- factorial(x)
plot(x, y, type = "l")
# Normal RV
# Density
dnorm(5, mean = 0, sd = 1, log = FALSE)
dnorm(5)
# Plot pdf
plot(dnorm,-3, 3, main = "Standard normal distribution")
x <- seq(-20, 20, by=0.1)
y <- dnorm(x, mean = 2, sd = 5)
plot(x, y, type = "l")
# Calculate cdf
pnorm(5, mean = 2, sd = 5, lower.tail = TRUE, log.p = FALSE)
# Find the probability that a value is within
# 1.96 standard deviations from the mean
pnorm(1.96, lower.tail = TRUE) - pnorm(-1.96, lower.tail = TRUE)
# Plot cdf
plot(pnorm, -5, 5, main = "Normal cdf")
# Quantiles
qnorm(0.25, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
# Find the median of the standard normal distribution
qnorm(0.5)
# Find the lower and upper bounds of a 95\% confidence interval
c(qnorm(0.025),qnorm(0.975))
# Generate a normal random variable with 10000 values
rnorm(10000, mean = 2, sd = 5)
# Plot
plot(rnorm(10000, mean = 0, sd = 5),
type = "l", col = "blue", main = "Gaussian white noise")
# Histogram
hist(rnorm(10000, mean = 2, sd = 5), breaks = 50, col = "orange")
# Chi-square RV
# pdf
dchisq(3, 5)
# Plot
x <- seq(0, 20, by = 0.01)
y <- dchisq(x, 5)
plot(x, y, type="l")
# cdf
pchisq(3, 5)
# Plot cdf
x <- seq(0, 20, by = 0.01)
y <- pchisq(x, 5)
plot(x, y, type = "l")
# F-distribution
# pdf
df(3, 2, 5)
# Plot pdf
x <- seq(0, 20, by = 0.01)
y <- df(x, 2, 5)
plot(x, y, type = "l")
# cdf
pf(3, 2, 5)
# Plot cdf
x <- seq(0, 20, by = 0.01)
y <- pf(x, 2, 5)
plot(x, y, type = "l")
# t-distribution
# pdf
dt(0, 15)
# Plot
x <- seq(-20, 20, by = 0.01)
y = dt(x, 99)
plot(x, y, type = "l")
# cdf
pt(0, 15)
rm(list = ls())
# Get location of current script
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to script location
setwd(fileloc)
rm(fileloc)
# Binomial RV
# Find the probability of getting heads two times
# out of ten fair coin tosses
dbinom(2, 10, 0.5, log = FALSE)
# What is the probability of NOT getting a pass (60%)
# if you answer randomly at an exam in which there are
# 20 multiple-choice questions (the number of options is 4)?
pbinom(11, 20, 0.25, lower.tail = TRUE, log.p = FALSE)
# Find the number of correct answers so that
# your test score is in the 75th percentile
qbinom(0.75, 20, 0.25, lower.tail = TRUE, log.p = FALSE)
# Generate 100 random numbers from the binomial distribution
# where $p = 0.6$ and $n = 20$
rbinom(100, 20, 0.6)
# Plot
plot(rbinom(100, 20, 0.6), type = "p")
# Histogram
hist(rbinom(100, 20, 0.6), breaks = 20)
# Geometric Random Variables
# What is the probability of tossing 5 times a fair coin and
# getting tails before we get heads on the sixth toss?
dgeom(5, 0.5, log=FALSE)
# What is the probability of tossing a coin between zero and
# five times before getting heads?
pgeom(5, 0.5, lower.tail = TRUE, log.p = FALSE)
# Poisson RV
# 15 cars arrive at a gas station on average per hour.
# What is the probability that 10 cars arrive during a chosen hour?
dpois(10, 15, log = FALSE)
# Calculate the probability of having 10 or less cars arrive:
ppois(10, 15, lower.tail = TRUE, log.p = FALSE)
# Uniform RV
# Calculate density at a given value
dunif(0.7, min = 0, max = 1, log = FALSE)
# Plot
plot(dunif, 0, 1, main = "The Uniform pdf")
# cdf
punif(0.7, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE)
# Plot cdf
plot(punif, 0, 1, main = "Uniform cdf")
# Calculate median:
qunif(0.5, min = 0, max = 1, log = FALSE)
# Generate 10000 values of a uniformly distributed random variable:
runif(10000, min = 0, max = 1)
# Plot
plot(runif(10000, min = 0, max = 1),
type = "l", col = "red", main = "Uniform RV")
# Histogram:
hist(runif(10000, min = 0, max = 1),
breaks = 50, col = "red", main = "Uniform RV (histogram)")
# Exponential RV
dexp(2, 0.25)
# Plot
x <- seq(0, 20, by = 0.01)
y <- dexp(x, 0.25)
plot(x, y, type = "l")
# Plot the cdf
y <- pexp(x, 0.25)
plot(x, y, type = "l")
# Let $x$ be the amount of time that a customer is processed
# by a cashier at a department store. What is the probability
# that a customer is processed between 3 and 4 minutes
# if on average a customer is processed 4 minutes?
pexp(4, 0.25) - pexp(3,0.25)
# Let $x$ be the amount of time that a customer is processed
# by a cashier at a department store. What is the probability
# that a customer is processed between 3 and 4 minutes
# if on average a customer is processed 4 minutes?
pexp(5, 0.25) - pexp(3,0.25)
# Find the time for which half of the customers are being processed
qexp(0.5, 0.25)
# Gamma function
x <- seq(1, 10, by=.1)
y <- factorial(x)
plot(x, y, type = "l")
# Normal RV
# Density
dnorm(5, mean = 0, sd = 1, log = FALSE)
dnorm(5)
# Plot pdf
plot(dnorm,-3, 3, main = "Standard normal distribution")
x <- seq(-20, 20, by=0.1)
y <- dnorm(x, mean = 2, sd = 5)
plot(x, y, type = "l")
# Calculate cdf
pnorm(5, mean = 2, sd = 5, lower.tail = TRUE, log.p = FALSE)
# Find the probability that a value is within
# 1.96 standard deviations from the mean
pnorm(1.96, lower.tail = TRUE) - pnorm(-1.96, lower.tail = TRUE)
# Plot cdf
plot(pnorm, -5, 5, main = "Normal cdf")
# Quantiles
qnorm(0.25, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
# Find the median of the standard normal distribution
qnorm(0.5)
# Find the lower and upper bounds of a 95\% confidence interval
c(qnorm(0.025),qnorm(0.975))
# Generate a normal random variable with 10000 values
rnorm(10000, mean = 2, sd = 5)
# Plot
plot(rnorm(10000, mean = 0, sd = 5),
type = "l", col = "blue", main = "Gaussian white noise")
# Histogram
hist(rnorm(10000, mean = 2, sd = 5), breaks = 50, col = "orange")
# Histogram
hist(rnorm(100000000, mean = 2, sd = 5), breaks = 50, col = "orange")
# Histogram
hist(rnorm(100000000, mean = 2, sd = 5), breaks = 500, col = "orange")
# Chi-square RV
# pdf
dchisq(3, 5)
# Plot
x <- seq(-5, 50, by = 0.01)
y <- dchisq(x, 5)
plot(x, y, type="l")
# cdf
pchisq(3, 5)
# Plot cdf
x <- seq(0, 20, by = 0.01)
y <- pchisq(x, 5)
plot(x, y, type = "l")
# F-distribution
# pdf
df(3, 2, 5)
# Plot pdf
x <- seq(0, 20, by = 0.01)
y <- df(x, 2, 5)
plot(x, y, type = "l")
# cdf
pf(3, 200, 59)
# Plot pdf
x <- seq(0, 20, by = 0.01)
y <- df(x, 200, 59)
plot(x, y, type = "l")
# cdf
pf(3, 2, 5)
# Plot cdf
x <- seq(0, 20, by = 0.01)
y <- pf(x, 2, 5)
plot(x, y, type = "l")
# t-distribution
# pdf
dt(0, 15)
# Plot
x <- seq(-5, 5, by = 0.01)
y <-  dt(x, 15)
plot(x, y, type = "l")
# cdf
pt(0, 15)
# Add a normal density to the graph
z <- dnorm(x)
lines(x, z, col = "red")
# Plot
x <- seq(-5, 5, by = 0.01)
y <-  dt(x, 150)
plot(x, y, type = "l")
# Add a normal density to the graph
z <- dnorm(x)
lines(x, z, col = "red")
# Clear workspace
rm(list = ls())
# Clear plots
dev.off(dev.list()["RStudioGD"])
# Get location of current script
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to script location
setwd(fileloc)
# Remove fileloc variable
rm(fileloc)
# Set locale to English
Sys.setlocale("LC_ALL","English")
library(mvtnorm)
library(mvtnorm)
library(ggplot2)
sigmamat <- matrix(c(1, 0.6, 0.6, 1), nrow = 2)
sigmamat
# Density
dmvnorm(x = c(1,2), mean = c(0.05, -0.05), sigma = sigmamat)
# Cumulative
pmvnorm(lower = -Inf, upper = c(1,2), mean = c(0.05, -0.05), sigma = sigmamat)
# Random number generation
rvec1 <- rmvnorm(n = 10000, mean = c(0.05, -0.05), sigma = sigmamat)
rvec1 <- as.data.frame(rvec1)
# Same but if the two variables are uncorrelated
sigmamat2 <- matrix(c(1, 0, 0, 1), nrow = 2)
sigmamat2
rvec2 <- rmvnorm(n = 10000, mean = c(0.05, -0.05), sigma = sigmamat2)
rvec2 <- as.data.frame(rvec2)
# Plot
ggplot(rvec1, aes(x = V1, y = V2)) +
geom_point(col = "red", size = 2, alpha = 0.3) +
theme_bw()
# Clear wortkspace
rm(list = ls())
# Clear plots
check_dev <- dev.list()
if(!is.null(check_dev)){
dev.off(dev.list()["RStudioGD"])
}
# Get location of current script
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
# Set working directory to script location
setwd(fileloc)
# Remove fileloc variable
rm(fileloc, check_dev)
# Set locale to English
Sys.setlocale("LC_ALL","English")
library(readxl)
# Read data on population
pop <- read_xls("Pop_6.1.1_Pop_DR_EN.xls",
skip = 4,
na = "-",
sheet = "2021")
# Remove columns with urban and rural data
pop <- pop[,1:4]
# Remove country totals
pop <- pop[-1,]
# Rename columns
colnames(pop)[2:4] <- c("Total", "Male", "Female")
# Count rows and columns
nrow(pop)
ncol(pop)
# Access a specific cell
pop[2,3]
pop[[2,3]]
# Access variables
pop$Total
pop$Male
pop$Female
# Descriptive stats: minima and maxima
max(pop$Total)
min(pop$Total)
pop$Male
pop$Female
# Descriptive stats: minima and maxima
max(pop$Total)
min(pop$Total)
range(pop$Male)
which.max(pop$Total)
pop$Municipalities[222]
which.min(pop$Total)
pop$Municipalities[108]
pop$Municipalities[which.max(pop$Total)]
## This program will display a message
## stating the city with the maximum population
maxm <- which.max(pop$Total)
city <- pop[maxm, 1, drop = T]
cat("The Bulgarian municipality with the largest population (totalling",
max(pop$Total), "inhabitants) is", city, ".")
# Median; quantiles
median(pop$Total, na.rm = T) # or
quantile(pop$Total, 0.5, na.rm = T)
quantile(pop$Total, probs=c(0, 0.25, 0.5, 0.75, 1.0),
na.rm = T)
IQR(pop$Total, na.rm = T)
table(pop$Total)
# Mode
Mode <- function(x) {
temp <- table(as.vector(x))
as.numeric(names(temp)[temp == max(temp)])
}
Mode(pop$Male)
library(modeest)
mlv(pop$Male, method = "mfv")
# Mean, variance, standard deviation
mean(pop$Total, na.rm = T)
var(pop$Total, na.rm = T)
sd(pop$Total, na.rm = T)
summary(pop) # Summary stats
str(pop) # Structure of frame
View(pop)
# Covariance and correlation
cov(pop$Male, pop$Female)
cor(pop$Male, pop$Female)
library(openxlsx)
pearson <- read.xlsx("pearson.xlsx", sheet = "Sheet1")
View(pearson)
attach(pearson)
cor(var1, var2, method = "pearson")
cor(var1, var2, method = "spearman")
cor(var1, var2, method = "kendall")
# Histogram
infl <- read.csv("cpi_infl_avg.csv",
header = TRUE, stringsAsFactors = FALSE)
View(infl)
hist(infl$value, main="Distribution of Inflation Rates",
xlab="Values", breaks = 120, freq = F)
View(infl)
hist(infl$value, main="Distribution of Inflation Rates",
xlab="Values", breaks = 120, freq = T)
hist(infl$value, main="Distribution of Inflation Rates",
xlab="Values", breaks = 120, xlim = c(-35,35),
col = "red")
hist(infl$value, main="Distribution of Inflation Rates",
xlab="Values", breaks = 120, xlim = c(-35,35),
col = "orange")
# Scatter plot
gdp <- read.csv2("gdp.csv")
View(gdp)
plot(gdp$GDP, gdp$Cons)
plot(gdp$Year, gdp$Exports, type = "l", ylim = c(0,70))
points(gdp$Year, gdp$Exports)
lines(gdp$Year, gdp$Imports, col = "red")
points(gdp$Year, gdp$Imports, col = "red")
# Bar graphs and box plots
barplot(gdp$GDP, names.arg = gdp$Year, col = "blue")
boxplot(gdp$Cons, gdp$GDP)
# Plotting function curves
curve(x^2 + log(x))
ownf <- function(xvar) {
1/(1 + exp(-5*xvar + 6))
}
curve(ownf, from=-10,to=10)
# ggplot2
library(ggplot2)
qplot(gdp$GDP,gdp$Cons)
qplot(GDP, Cons, data=gdp)
dev.copy(png, "scatter.png")
dev.off()
dev.copy2pdf(file = "pdf_plot.pdf", width = 8, height = 6)
qplot(Year, Cons, data=gdp, geom = c("line","point"))
ggplot(gdp, aes(x=Year,y=GDP))
ggplot(gdp, aes(x=Year,y=GDP)) +
geom_line() +
geom_point()
ggplot(gdp, aes(x=Year,y=GDP)) +
geom_line(colour = "red", size=1.5) +
geom_point(colour="red", size=4)
ggplot(gdp, aes(x=Year,y=GDP)) +
geom_bar(stat="identity")
ggplot(gdp, aes(x=Year,y=GDP)) +
geom_bar(stat="identity",
fill="orange",
colour = "blue")
ggplot(gdp, aes(Year)) +
geom_line(aes(y=GDP, color = "GDP"), size=1.5) +
geom_line(aes(y=Cons, color = "Cons"), size=1.5) +
scale_color_manual("Legend", values = c("blue", "orange")) +
theme_dark() +
theme(legend.position = "bottom") +
ggtitle("Some title")
ggplot(gdp, aes(Year)) +
geom_line(aes(y=GDP, color = "GDP"), size=1.5) +
geom_line(aes(y=Cons, color = "Cons"), size=1.5) +
scale_color_manual("Legend", values = c("blue", "orange")) +
theme_bw() +
theme(legend.position = "bottom") +
ggtitle("Some title")
library(reshape2)
meltgdp <- melt(gdp, id="Year")
ggplot(meltgdp, aes(x=Year,
y=value,
color = variable,
group=variable)) +
geom_line(size=1.5)
func1 <- function(x){
sin(x) + cos(x)
}
plot1 <- ggplot(data.frame(x=c(0, 20)), aes(x=x)) +
stat_function(fun=func1, geom="line", size=1, color = "red" )
plot1
func2 <- function(x) {
2*sin(x)
}
plot2 <- plot1 + stat_function(fun=func2,size=1,color="blue")
plot2
dev.copy2pdf(file="sines.pdf")
dome <- function(x,y){
-(x^2 + y^2)
}
x <- seq(from=-3, to = 3, by=0.1)
y <- seq(from=-3, to = 3, by=0.1)
z <- outer(x,y,dome)
persp(x,y,z,col="blue",theta=70,phi=-10)
persp(x,y,z,col="blue",theta=90,phi=-10)
library(lattice)
demo(lattice)
